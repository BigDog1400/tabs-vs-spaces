import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useForm } from "react-hook-form";
import { useRouter } from "next/router";

const Home: NextPage = () => {
  const { push } = useRouter();
  const counterMutation = trpc.useMutation("counter.add", {
    onSuccess: () => {
      push("/results");
    },
  });

  const { register, handleSubmit } = useForm();

  function onSubmitButton(data: any) {
    counterMutation.mutate({
      name: data.choise,
    });
  }

  if (counterMutation.error) {
    return (
      <main className="container mx-auto flex flex-col items-center justify-center min-h-[90vh] p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          TABS vs SPACE
        </h1>
        <h2 className="text-5xl md:text-[2rem] leading-normal font-extrabold text-gray-700">
          An error occured
        </h2>
        <p>
          It looks like and error ocurred or maybe you have already voted.
          Please{" "}
          <a href="/results" className="text-blue-500">
            click here
          </a>{" "}
          to see the current results.
        </p>
      </main>
    );
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-[90vh] p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          TABS vs SPACE
        </h1>
        <h2 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Vote
        </h2>
        <form onSubmit={handleSubmit(onSubmitButton)}>
          <div className="mb-5">
            <div className="flex items-center space-x-6">
              <div className="flex items-center">
                <input
                  {...register("choise", { required: true })}
                  type="radio"
                  name="choise"
                  id="tabs"
                  className="h-5 w-5"
                  value={"tabs"}
                />
                <label
                  htmlFor="tabs"
                  className="pl-3 text-base font-medium text-[#07074D]"
                >
                  Tabs
                </label>
              </div>
              <div className="flex items-center">
                <input
                  {...register("choise", { required: true })}
                  type="radio"
                  name="choise"
                  id="checkbox"
                  className="h-5 w-5"
                  value={"spaces"}
                />
                <label
                  htmlFor="checkbox"
                  className="pl-3 text-base font-medium text-[#07074D]"
                >
                  Spaces
                </label>
              </div>
            </div>
          </div>

          <div className="flex  items-center flex-col">
            <button
              className="hover:shadow-form rounded-md bg-[#6A64F1] py-3 px-8 text-center text-base font-semibold text-white outline-none mx-0"
              type="submit"
            >
              Submit
            </button>
          </div>
        </form>
      </main>
      <footer className="flex justify-center items-center">
        made by &nbsp;
        <a
          href="https://github.com/BigDog1400"
          target={"_blank"}
          rel="noopener noreferrer"
        >
          {" "}
          @BigDog1400
        </a>
      </footer>
    </>
  );
};

export default Home;
